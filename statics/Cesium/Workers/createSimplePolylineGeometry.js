define(["./when-cbf8cd21","./Check-35e1a91d","./Math-e66fad2a","./Cartesian2-44433f55","./Transforms-a6071fdb","./RuntimeError-f4c64df1","./WebGLConstants-95ceb4e9","./ComponentDatatype-7ee14e67","./GeometryAttribute-d239a979","./GeometryAttributes-90846c5f","./IndexDatatype-66caba23","./IntersectionTests-5912ffe9","./Plane-b2b7f933","./ArcType-2b58731c","./EllipsoidRhumbLine-862a2df4","./EllipsoidGeodesic-7779e55a","./PolylinePipeline-919c0ec0","./Color-3780ac32"],function(L,e,V,x,S,o,t,I,R,O,M,r,a,U,l,i,N,F){"use strict";function c(e){var o=(e=L.defaultValue(e,L.defaultValue.EMPTY_OBJECT)).positions,t=e.colors,r=L.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=t,this._colorsPerVertex=r,this._arcType=L.defaultValue(e.arcType,U.ArcType.GEODESIC),this._granularity=L.defaultValue(e.granularity,V.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=L.defaultValue(e.ellipsoid,x.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";o=1+o.length*x.Cartesian3.packedLength;o+=L.defined(t)?1+t.length*F.Color.packedLength:1,this.packedLength=o+x.Ellipsoid.packedLength+3}c.pack=function(e,o,t){var r;t=L.defaultValue(t,0);var a=e._positions,l=a.length;for(o[t++]=l,r=0;r<l;++r,t+=x.Cartesian3.packedLength)x.Cartesian3.pack(a[r],o,t);var i=e._colors,l=L.defined(i)?i.length:0;for(o[t++]=l,r=0;r<l;++r,t+=F.Color.packedLength)F.Color.pack(i[r],o,t);return x.Ellipsoid.pack(e._ellipsoid,o,t),t+=x.Ellipsoid.packedLength,o[t++]=e._colorsPerVertex?1:0,o[t++]=e._arcType,o[t]=e._granularity,o},c.unpack=function(e,o,t){o=L.defaultValue(o,0);for(var r=e[o++],a=new Array(r),l=0;l<r;++l,o+=x.Cartesian3.packedLength)a[l]=x.Cartesian3.unpack(e,o);var i=0<(r=e[o++])?new Array(r):void 0;for(l=0;l<r;++l,o+=F.Color.packedLength)i[l]=F.Color.unpack(e,o);var n=x.Ellipsoid.unpack(e,o);o+=x.Ellipsoid.packedLength;var s=1===e[o++],p=e[o++],d=e[o];return L.defined(t)?(t._positions=a,t._colors=i,t._ellipsoid=n,t._colorsPerVertex=s,t._arcType=p,t._granularity=d,t):new c({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:d})};var H=new Array(2),W=new Array(2),Y={positions:H,height:W,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return c.createGeometry=function(e){var o,t,r,a=e._positions,l=e._colors,i=e._colorsPerVertex,n=e._arcType,s=e._granularity,e=e._ellipsoid,p=V.CesiumMath.chordLength(s,e.maximumRadius),d=L.defined(l)&&!i,c=a.length,f=0;if(n===U.ArcType.GEODESIC||n===U.ArcType.RHUMB){var y,u,h=n===U.ArcType.GEODESIC?(y=V.CesiumMath.chordLength(s,e.maximumRadius),u=N.PolylinePipeline.numberOfPoints,N.PolylinePipeline.generateArc):(y=s,u=N.PolylinePipeline.numberOfPointsRhumbLine,N.PolylinePipeline.generateRhumbArc),C=N.PolylinePipeline.extractHeights(a,e),T=Y;if(n===U.ArcType.GEODESIC?T.minDistance=p:T.granularity=s,T.ellipsoid=e,d){for(var g=0,m=0;m<c-1;m++)g+=u(a[m],a[m+1],y)+1;o=new Float64Array(3*g),r=new Uint8Array(4*g),T.positions=H,T.height=W;var P=0;for(m=0;m<c-1;++m){H[0]=a[m],H[1]=a[m+1],W[0]=C[m],W[1]=C[m+1];var _=h(T);if(L.defined(l))for(var b=_.length/3,v=l[m],B=0;B<b;++B)r[P++]=F.Color.floatToByte(v.red),r[P++]=F.Color.floatToByte(v.green),r[P++]=F.Color.floatToByte(v.blue),r[P++]=F.Color.floatToByte(v.alpha);o.set(_,f),f+=_.length}}else if(T.positions=a,T.height=C,o=new Float64Array(h(T)),L.defined(l)){for(r=new Uint8Array(o.length/3*4),m=0;m<c-1;++m)f=function(e,o,t,r,a,l,i){var n=N.PolylinePipeline.numberOfPoints(e,o,a),s=t.red,p=t.green,d=t.blue,c=t.alpha,f=r.red,e=r.green,o=r.blue,a=r.alpha;if(F.Color.equals(t,r)){for(g=0;g<n;g++)l[i++]=F.Color.floatToByte(s),l[i++]=F.Color.floatToByte(p),l[i++]=F.Color.floatToByte(d),l[i++]=F.Color.floatToByte(c);return i}for(var y=(f-s)/n,u=(e-p)/n,h=(o-d)/n,C=(a-c)/n,T=i,g=0;g<n;g++)l[T++]=F.Color.floatToByte(s+g*y),l[T++]=F.Color.floatToByte(p+g*u),l[T++]=F.Color.floatToByte(d+g*h),l[T++]=F.Color.floatToByte(c+g*C);return T}(a[m],a[m+1],l[m],l[m+1],p,r,f);var A=l[c-1];r[f++]=F.Color.floatToByte(A.red),r[f++]=F.Color.floatToByte(A.green),r[f++]=F.Color.floatToByte(A.blue),r[f++]=F.Color.floatToByte(A.alpha)}}else{t=d?2*c-2:c,o=new Float64Array(3*t),r=L.defined(l)?new Uint8Array(4*t):void 0;var E=0,k=0;for(m=0;m<c;++m){var G=a[m];if(d&&0<m&&(x.Cartesian3.pack(G,o,E),E+=3,v=l[m-1],r[k++]=F.Color.floatToByte(v.red),r[k++]=F.Color.floatToByte(v.green),r[k++]=F.Color.floatToByte(v.blue),r[k++]=F.Color.floatToByte(v.alpha)),d&&m===c-1)break;x.Cartesian3.pack(G,o,E),E+=3,L.defined(l)&&(v=l[m],r[k++]=F.Color.floatToByte(v.red),r[k++]=F.Color.floatToByte(v.green),r[k++]=F.Color.floatToByte(v.blue),r[k++]=F.Color.floatToByte(v.alpha))}}e=new O.GeometryAttributes;e.position=new R.GeometryAttribute({componentDatatype:I.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o}),L.defined(l)&&(e.color=new R.GeometryAttribute({componentDatatype:I.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:r,normalize:!0}));var A=2*((t=o.length/3)-1),w=M.IndexDatatype.createTypedArray(t,A),D=0;for(m=0;m<t-1;++m)w[D++]=m,w[D++]=m+1;return new R.Geometry({attributes:e,indices:w,primitiveType:R.PrimitiveType.LINES,boundingSphere:S.BoundingSphere.fromPoints(a)})},function(e,o){return L.defined(o)&&(e=c.unpack(e,o)),e._ellipsoid=x.Ellipsoid.clone(e._ellipsoid),c.createGeometry(e)}});
